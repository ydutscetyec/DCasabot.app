// === Pin Setup ===
#define SENSOR_LEFT   25
#define SENSOR_BACK   33
#define SENSOR_RIGHT  32

// === Motor Pins ===
#define LEFT_MOTOR_DIR   13
#define LEFT_MOTOR_PWM   12
#define RIGHT_MOTOR_DIR  14
#define RIGHT_MOTOR_PWM  27

// === Speed Settings ===
#define BASE_SPEED   150
#define TURN_SPEED   200
#define STOP_SPEED   0

void setup() {
  Serial.begin(115200);

  pinMode(SENSOR_LEFT, INPUT_PULLUP);
  pinMode(SENSOR_BACK, INPUT_PULLUP);
  pinMode(SENSOR_RIGHT, INPUT_PULLUP);

  pinMode(LEFT_MOTOR_DIR, OUTPUT);
  pinMode(LEFT_MOTOR_PWM, OUTPUT);
  pinMode(RIGHT_MOTOR_DIR, OUTPUT);
  pinMode(RIGHT_MOTOR_PWM, OUTPUT);

  Serial.println("=== SIMPLE LINE FOLLOWING START ===");
}

void loop() {
  bool left  = digitalRead(SENSOR_LEFT);
  bool back  = digitalRead(SENSOR_BACK);
  bool right = digitalRead(SENSOR_RIGHT);

  // LOW = black (line), HIGH = white (no line)
  if (back == LOW && left == HIGH && right == HIGH) {
    // Center on line → go straight
    forward(BASE_SPEED);
    Serial.println("FORWARD");
  }
  else if (left == LOW && right == HIGH) {
    // Left sensor on line → turn left
    turnLeft(TURN_SPEED);
    Serial.println("TURN LEFT");
  }
  else if (right == LOW && left == HIGH) {
    // Right sensor on line → turn right
    turnRight(TURN_SPEED);
    Serial.println("TURN RIGHT");
  }
  else if (left == LOW && right == LOW) {
    // Both side sensors see line → possibly junction, go straight
    forward(BASE_SPEED);
    Serial.println("JUNCTION → FORWARD");
  }
  else {
    // Line lost
    stopMotors();
    Serial.println("STOP - LINE LOST");
  }

  delay(50);
}

// === Motor Control Functions ===
void forward(int speed) {
  digitalWrite(LEFT_MOTOR_DIR, HIGH);
  digitalWrite(RIGHT_MOTOR_DIR, HIGH);
  analogWrite(LEFT_MOTOR_PWM, speed);
  analogWrite(RIGHT_MOTOR_PWM, speed);
}

void turnLeft(int speed) {
  digitalWrite(LEFT_MOTOR_DIR, LOW);
  digitalWrite(RIGHT_MOTOR_DIR, HIGH);
  analogWrite(LEFT_MOTOR_PWM, speed / 2);
  analogWrite(RIGHT_MOTOR_PWM, speed);
}

void turnRight(int speed) {
  digitalWrite(LEFT_MOTOR_DIR, HIGH);
  digitalWrite(RIGHT_MOTOR_DIR, LOW);
  analogWrite(LEFT_MOTOR_PWM, speed);
  analogWrite(RIGHT_MOTOR_PWM, speed / 2);
}

void stopMotors() {
  analogWrite(LEFT_MOTOR_PWM, STOP_SPEED);
  analogWrite(RIGHT_MOTOR_PWM, STOP_SPEED);
}
