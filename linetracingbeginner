#include <CytronMotorDriver.h>

// =================== MOTOR SETUP ===================
CytronMD motorLeft(PWM_PWM, 12, 13);   // Left motor: PWM 12, DIR 13
CytronMD motorRight(PWM_PWM, 14, 27);  // Right motor: PWM 14, DIR 27

#define MAX_SPEED 255

// =================== LINE SENSORS (DIGITAL QTR-1RC) ===================
#define SENSOR_LEFT   25
#define SENSOR_MIDDLE 33
#define SENSOR_RIGHT  32

// =================== PID VARIABLES ===================
float Kp = 100.0;   // Proportional gain
float Ki = 0.0;     // Integral gain (optional)
float Kd = 50.0;    // Derivative gain

int error = 0;
int lastError = 0;
int integral = 0;

void setup() {
  Serial.begin(115200);

  pinMode(SENSOR_LEFT, INPUT_PULLUP);
  pinMode(SENSOR_MIDDLE, INPUT_PULLUP);
  pinMode(SENSOR_RIGHT, INPUT_PULLUP);

  Serial.println("=== RoboESP32 DIGITAL LINE FOLLOWER (PID) ===");
}

void loop() {
  // Read sensors (LOW = line detected)
  bool left   = (digitalRead(SENSOR_LEFT) == LOW);
  bool middle = (digitalRead(SENSOR_MIDDLE) == LOW);
  bool right  = (digitalRead(SENSOR_RIGHT) == LOW);

  // =================== CALCULATE ERROR ===================
  if (middle) {
    error = 0;           // Centered
  } else if (left) {
    error = -1;          // Line on left → negative error
  } else if (right) {
    error = 1;           // Line on right → positive error
  } else {
    error = 0;           // Line lost → keep previous or stop
  }

  integral += error;
  int derivative = error - lastError;
  lastError = error;

  // =================== PID OUTPUT ===================
  float output = Kp * error + Ki * integral + Kd * derivative;

  // =================== CALCULATE MOTOR SPEEDS ===================
  int speedL = MAX_SPEED - output;
  int speedR = MAX_SPEED + output;

  // Limit speeds
  speedL = constrain(speedL, 0, MAX_SPEED);
  speedR = constrain(speedR, 0, MAX_SPEED);

  moveRobot(speedL, speedR);

  // Debug output
  Serial.print("L: "); Serial.print(left);
  Serial.print(" M: "); Serial.print(middle);
  Serial.print(" R: "); Serial.print(right);
  Serial.print(" | Error: "); Serial.print(error);
  Serial.print(" | Out: "); Serial.print(output);
  Serial.print(" | Speed L: "); Serial.print(speedL);
  Serial.print(" R: "); Serial.println(speedR);

  delay(20); // Short delay for loop stability
}

// =================== MOTOR CONTROL FUNCTION ===================
void moveRobot(int leftSpeed, int rightSpeed) {
  leftSpeed = constrain(leftSpeed, 0, MAX_SPEED);
  rightSpeed = constrain(rightSpeed, 0, MAX_SPEED);

  motorLeft.setSpeed(leftSpeed);
  motorRight.setSpeed(rightSpeed);
}
