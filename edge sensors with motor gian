// === 4-EDGE SENSOR + MOTOR TEST WITH START/STOP BUTTON ===
// FRONT=10, LEFT=13, RIGHT=12, BACK=11
// BUTTON=2 (Active LOW)
// Uses CytronMotorDriver (PWM_DIR mode)

#include <CytronMotorDriver.h>

// === Sensor Pins ===
#define EDGE_FRONT 10
#define EDGE_LEFT  13
#define EDGE_RIGHT 12
#define EDGE_BACK  11
#define START_BUTTON 2  // Active LOW button

// === Motor Pins ===
CytronMD motorL(PWM_DIR, 5, 4); // PWM, DIR
CytronMD motorR(PWM_DIR, 6, 7); // PWM, DIR

// === Constants ===
const int EDGE_TRIGGER = LOW;  // QTR outputs LOW when over white edge
const int ACTION_TIME  = 250;  // ms duration per maneuver
const int BASE_SPEED   = 200;  // default forward speed

// === State Variables ===
bool running = false;
bool lastButtonState = HIGH;

void setup() {
  Serial.begin(9600);

  pinMode(EDGE_FRONT, INPUT_PULLUP);
  pinMode(EDGE_LEFT, INPUT_PULLUP);
  pinMode(EDGE_RIGHT, INPUT_PULLUP);
  pinMode(EDGE_BACK, INPUT_PULLUP);
  pinMode(START_BUTTON, INPUT_PULLUP);

  motorL.setSpeed(0);
  motorR.setSpeed(0);

  Serial.println("=== 4-EDGE SENSOR + MOTOR TEST READY ===");
  Serial.println("Press the button to START or STOP...");
}

void loop() {
  bool buttonState = digitalRead(START_BUTTON);

  // === Toggle Test Start/Stop ===
  if (lastButtonState == HIGH && buttonState == LOW) {
    running = !running;
    if (running) Serial.println("\n>>> TEST STARTED <<<");
    else {
      Serial.println("\n>>> TEST STOPPED <<<");
      motorL.setSpeed(0);
      motorR.setSpeed(0);
    }
    delay(200); // debounce
  }
  lastButtonState = buttonState;

  if (!running) return;

  // === Read Sensors ===
  bool frontEdge = (digitalRead(EDGE_FRONT) == EDGE_TRIGGER);
  bool leftEdge  = (digitalRead(EDGE_LEFT) == EDGE_TRIGGER);
  bool rightEdge = (digitalRead(EDGE_RIGHT) == EDGE_TRIGGER);
  bool backEdge  = (digitalRead(EDGE_BACK) == EDGE_TRIGGER);

  // === Print States ===
  Serial.print("Front: "); Serial.print(frontEdge ? "EDGE" : "SAFE");
  Serial.print(" | Left: "); Serial.print(leftEdge ? "EDGE" : "SAFE");
  Serial.print(" | Right: "); Serial.print(rightEdge ? "EDGE" : "SAFE");
  Serial.print(" | Back: "); Serial.println(backEdge ? "EDGE" : "SAFE");

  // === Decision Logic ===
  if (frontEdge) {
    Serial.println("Front edge → reversing");
    motorL.setSpeed(-BASE_SPEED);
    motorR.setSpeed(-BASE_SPEED);
    delay(ACTION_TIME);
  } 
  else if (leftEdge) {
    Serial.println("Left edge → turning right");
    motorL.setSpeed(BASE_SPEED);
    motorR.setSpeed(-BASE_SPEED);
    delay(ACTION_TIME);
  } 
  else if (rightEdge) {
    Serial.println("Right edge → turning left");
    motorL.setSpeed(-BASE_SPEED);
    motorR.setSpeed(BASE_SPEED);
    delay(ACTION_TIME);
  } 
  else if (backEdge) {
    Serial.println("Back edge → moving forward");
    motorL.setSpeed(BASE_SPEED);
    motorR.setSpeed(BASE_SPEED);
    delay(ACTION_TIME);
  } 
  else {
    // ✅ All sensors are SAFE (black)
    Serial.println("All sensors SAFE → moving FORWARD");
    motorL.setSpeed(BASE_SPEED);
    motorR.setSpeed(BASE_SPEED);
  }

  delay(100);
}
