// === EDGE SENSOR MOTOR TEST WITH START/STOP BUTTON AND MAX SPEED ===

#include <CytronMotorDriver.h>

#define EDGE_LEFT    11
#define EDGE_BACK    12
#define EDGE_RIGHT   10
#define START_BUTTON 13  // Active LOW

// Motor Pins (PWM_DIR mode)
CytronMD motorL(PWM_DIR, 5, 4);
CytronMD motorR(PWM_DIR, 6, 7);

const int EDGE_TRIGGER = LOW; // QTR output LOW = edge
const int ACTION_TIME  = 300; // ms duration of each action

bool running = false;     // test running flag
bool lastButtonState = HIGH; // for detecting button press

void setup() {
  Serial.begin(9600);

  pinMode(EDGE_LEFT, INPUT_PULLUP);
  pinMode(EDGE_BACK, INPUT_PULLUP);
  pinMode(EDGE_RIGHT, INPUT_PULLUP);
  pinMode(START_BUTTON, INPUT_PULLUP);

  motorL.setSpeed(0);
  motorR.setSpeed(0);

  Serial.println("=== EDGE MOTOR TEST READY ===");
  Serial.println("Press the button to start/stop...");
}

void loop() {
  bool buttonState = digitalRead(START_BUTTON);

  // Detect button press (transition HIGH → LOW)
  if (lastButtonState == HIGH && buttonState == LOW) {
    running = !running; // toggle running state
    if (running) Serial.println("Test STARTED");
    else {
      Serial.println("Test STOPPED");
      motorL.setSpeed(0);
      motorR.setSpeed(0);
    }
    delay(200); // debounce
  }
  lastButtonState = buttonState;

  if (!running) return; // do nothing if not running

  // Read edge sensors
  bool leftEdge  = (digitalRead(EDGE_LEFT) == EDGE_TRIGGER);
  bool backEdge  = (digitalRead(EDGE_BACK) == EDGE_TRIGGER);
  bool rightEdge = (digitalRead(EDGE_RIGHT) == EDGE_TRIGGER);

  // Print sensor states
  Serial.print("Left: "); Serial.print(leftEdge ? "EDGE" : "SAFE");
  Serial.print(" | Back: "); Serial.print(backEdge ? "EDGE" : "SAFE");
  Serial.print(" | Right: "); Serial.println(rightEdge ? "EDGE" : "SAFE");

  // If all are SAFE (black), stop
  if (!leftEdge && !backEdge && !rightEdge) {
    Serial.println("All sensors safe (black) → stop");
    motorL.setSpeed(0);
    motorR.setSpeed(0);
  } 
  else if (rightEdge) {
    Serial.println("Right edge detected → turning left");
    motorL.setSpeed(-255);
    motorR.setSpeed(255);
    delay(ACTION_TIME);
  } 
  else if (leftEdge) {
    Serial.println("Left edge detected → turning right");
    motorL.setSpeed(255);
    motorR.setSpeed(-255);
    delay(ACTION_TIME);
  } 
  else if (backEdge) {
    Serial.println("Back edge detected → moving forward");
    motorL.setSpeed(255);
    motorR.setSpeed(255);
    delay(ACTION_TIME);
  }

  // Stop after each action to recheck sensors
  motorL.setSpeed(0);
  motorR.setSpeed(0);

  delay(200); // small pause before next loop
}
